use crate::token::Token;

const MINIONS: [&str; 165] = [
  "mel",
  "kevin",
  "aaron",
  "adien",
  "adrian",
  "alex",
  "alvin",
  "andrew",
  "arthur",
  "barry",
  "ben",
  "benjamin",
  "benny",
  "bernie",
  "bert",
  "bill",
  "billy",
  "bob",
  "bobo",
  "brad",
  "brett",
  "brian",
  "buck",
  "butch",
  "carl",
  "charles",
  "charlie",
  "chris",
  "chuck",
  "cinco",
  "clark",
  "claude",
  "clay",
  "cody",
  "dan",
  "danny",
  "dave",
  "david",
  "donald",
  "donnie",
  "donny",
  "doug",
  "douglas",
  "drago",
  "edgar",
  "elijah",
  "eric",
  "ernest",
  "ethan",
  "euchariah",
  "eugene",
  "ezekiel",
  "finn",
  "frank",
  "fred",
  "gaetano",
  "gary",
  "gene",
  "george",
  "gerald",
  "gilbert",
  "gordon",
  "greg",
  "gus",
  "harry",
  "harold",
  "henry",
  "ian",
  "isaac",
  "ivan",
  "jack",
  "jackson",
  "jake",
  "james",
  "jason",
  "jeff",
  "jeffrey",
  "jeremy",
  "jerry",
  "jesse",
  "jim",
  "jo",
  "joe",
  "joey",
  "john",
  "johnny",
  "jon",
  "jorge",
  "josh",
  "jude",
  "justin",
  "ken",
  "kraig",
  "kurt",
  "kyle",
  "lance",
  "larry",
  "lewis",
  "liam",
  "lionel",
  "lucas",
  "luke",
  "mack",
  "marc",
  "mark",
  "mason",
  "matthew",
  "maurice",
  "michael",
  "mike",
  "mil",
  "miles",
  "miquel",
  "nate",
  "nathan",
  "neil",
  "nick",
  "noah",
  "nobu",
  "norbert",
  "oscar",
  "otto",
  "owen",
  "pablo",
  "patrick",
  "paul",
  "paxton",
  "pedro",
  "peter",
  "phil",
  "pierce",
  "pudgy",
  "ralph",
  "ricky",
  "robert",
  "robin",
  "rod",
  "roger",
  "ron",
  "ryan",
  "sam",
  "samson",
  "scott",
  "shawn",
  "sonny",
  "stan",
  "steve",
  "stu",
  "stuart",
  "stuart_jr",
  "stuartjr",
  "ted",
  "thomas",
  "tim",
  "todd",
  "tom",
  "tony",
  "theodore",
  "vegas",
  "vincent",
  "walter",
  "wayne",
  "william",
  "zack",
  "ziggy",
];

pub fn is_valid_minion(ident: &Token) -> bool {
  match ident {
    Token::IDENT(name) => {
      let name = name.to_lowercase();
      MINIONS.iter().any(|&minion| name.contains(minion))
    }
    _ => false
  }
}
